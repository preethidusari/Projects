// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @unique
  email      String   @unique
  first_name String?
  last_name  String?
  is_advisor Boolean  @default(false)
  is_admin   Boolean  @default(false)
  joinedAt   DateTime @default(now())
  rating     Float    @default(4.5)
  shellPass  String?

  file         File[]
  pdf_messages PdfChat[]
  bot_chats    BotChat[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id        String  @id @default(cuid())
  name      String
  isSecured Boolean @default(false)

  uploadStatus UploadStatus @default(PENDING)

  url      String
  key      String
  messages PdfChat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model PdfChat {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?
  File          File?    @relation(fields: [fileId], references: [id])
  fileId        String?
}

model BotChatMessage {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String?
  BotChat       BotChat? @relation(fields: [botChatId], references: [id])
  botChatId     String?
}

model BotChat {
  id    String @id @default(cuid())
  title String

  messages BotChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}

enum UserQueryCategory {
  divorce
  property
  family
  money
  employment
  criminal
  consumer
  insurance
  armed
  business
  civil
  supreme
  muslim
  immigration
}

model UserQueries {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now())
  userId        String?
  userName      String
  userEmail     String
  userLocation  String
  queryCategory UserQueryCategory
  querySubject  String
  userQuery     String
  isAnswered    Boolean           @default(false)
  answer        String?
  lawyerId      String?
}
